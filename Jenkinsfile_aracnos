import java.text.SimpleDateFormat
def date = new Date()
def rollback = ROOLBACK_BUILDS.replace("Aracnos ", "")
//def rollback = env.ROOLBACK_BUILDS
def tag_number = (params.ROOLBACK == true) ? rollback : env.BUILD_NUMBER

//ROOLBACK_BUILDS_NUMBER

pipeline {
   agent any
       environment {
        registry = "liviorodrigues/aracnos"
        registryCredential = 'docker_hub'
        dockerImage = 'aracnos'
        pom_version = ""
    }
   
    parameters {
        booleanParam(name: "ROOLBACK", defaultValue: false)
    }

    stages {

        stage('Clean Workspace') {
            //when { expression { !params.ROOLBACK } }
            steps {
                sh "printenv"
                echo ROOLBACK_BUILDS
                echo rollback
                //error("ok")
                deleteDir()
              }
        }
    
        stage('Clone App') {
            when { expression { !params.ROOLBACK } }
            steps {
                gitCloneFrom('master','gitlab_jenkis','http://gitlab.devops/notrap/aracnos.git' )

                script{
                    pom_version = readMavenPom().getVersion()
                    echo "VERSION: ${pom_version}"
                }

                sh "mkdir -p deploy"
                dir("deploy"){
                    gitCloneFrom('master','gitlab_jenkis','http://gitlab.devops/notrap/ansible_file_deploy.git' )
                }
            }
        }
        
        stage('Clone Config') {
            steps {
                sh "mkdir -p deploy"
                dir("deploy"){
                    gitCloneFrom('master','gitlab_jenkis','http://gitlab.devops/notrap/ansible_file_deploy.git' )
                }
            }
        }

        
        stage('SonarQube Analysis') {
            when { expression { !params.ROOLBACK } }
            steps {
            withSonarQubeEnv('sonar_aracnos_server') {
                    sh "mvn sonar:sonar -Dsonar.projectKey=aracnor -Dsonar.host.url=http://sonar.devops -Dsonar.login=5edb3a9357d4321f04951182bd7c43b5d7828100"
            }
          }
        }

        stage("Quality Gate") {
            when { expression { !params.ROOLBACK } }
            steps {
                withSonarQubeEnv('sonar_aracnos_server') {
                    sh 'mvn -B -X sonar:sonar'
                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: false
                    }
                }
            }
        }



        stage('Build JAR') {
          when { expression { !params.ROOLBACK } }
          steps {
                
            sh "mvn -B -DskipTests clean package"
            //stash name:"jar", includes:"target/myappapi-0.0.0-SNAPSHOT.jar"
          }
        }
        
        stage('Test') {
            when { expression { !params.ROOLBACK } }
            steps {
                sh 'mvn test'
              }
              post {
                always {
                  junit 'target/surefire-reports/*.xml'
                }
              }
        }
        
        stage('Building image') {
            when { expression { !params.ROOLBACK } }
            steps{
                script {
                dockerImage = docker.build(registry + ":$BUILD_NUMBER" )
                sh 'docker build -t liviorodrigues/aracnos":$BUILD_NUMBER" . '
                }
            }
        }

        stage('Register Image') {
            when { expression { !params.ROOLBACK } }
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                    dockerImage.push()
                }
            }
          }
        }        

        stage('Deploy: ${tag_number} ') {
           // when { expression { params.ROOLBACK } }
            steps{
                script {
                    //   def tag_number = (params.ROOLBACK == true) ? rollback : env.BUILD_NUMBER
                       dir("deploy"){
                           deployWithBuildNumber(tag_number)
                       }
                }
            }
        }

        stage("TAGs") {
            when { expression { !params.ROOLBACK } }
            steps{
                 script {

                    sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
                    def now = sdf.format(date)
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'gitlab_jenkis', usernameVariable: 'GIT_AUTHOR_NAME', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'git config --global user.email "aracnos@jenkins.com"'
                    sh 'git config --global user.name "Jenkins"'
                    sh 'git config --global push.default simple'
                    sh 'git tag -a "v${BUILD_NUMBER}.' + pom_version + '" -m "CREATE: date: ' + now + ' "'

                    sh('git push http://${GIT_AUTHOR_NAME}:${GIT_PASSWORD}@gitlab.devops/notrap/aracnos.git  --tags -f --no-verify')
                    }
                }
            }
        }

    }
    
}


def gitCloneFrom(branch,credentialsId,url ){
    try{
        git branch: "${branch}", credentialsId: "${credentialsId}", url: "${url}"
    } catch(Exception e) {
        println("Exception: ${e}")
    }
}

def deployWithBuildNumber(buildNumber){
    try{
       sh "ansible-playbook -i hosts app_provisioning.yml --extra-vars REGISTER=${buildNumber} -vv"
    } catch(Exception e) {
       println("Exception: ${e}")
    }
}