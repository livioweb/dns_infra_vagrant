<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.19">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.19">
          <spec></spec>
          <triggerOnPush>true</triggerOnPush>
          <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
          <triggerOnMergeRequest>true</triggerOnMergeRequest>
          <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
          <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
          <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
          <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
          <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
          <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
          <triggerOnNoteRequest>true</triggerOnNoteRequest>
          <noteRegex>Jenkins please retry a build</noteRegex>
          <ciSkip>true</ciSkip>
          <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
          <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
          <setBuildDescription>true</setBuildDescription>
          <branchFilterType>All</branchFilterType>
          <includeBranchesSpec></includeBranchesSpec>
          <excludeBranchesSpec></excludeBranchesSpec>
          <sourceBranchRegex></sourceBranchRegex>
          <targetBranchRegex></targetBranchRegex>
          <secretToken>{AQAAABAAAAAQlSd5frhkBOpMeRIhLT+U2jUJyS+mQajv88mvl/CDrRQ=}</secretToken>
          <pendingBuildName></pendingBuildName>
          <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
        </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>import java.text.SimpleDateFormat
def date = new Date()


pipeline {
   agent any

    stages {

        stage(&apos;Clean Workspace&apos;) {
            steps {
                deleteDir()
              }
        }
    
        stage(&apos;Cloning Git&apos;) {
        steps {
            gitCloneFrom(&apos;master&apos;,&apos;gitlab_jenkis&apos;,&apos;http://gitlab.devops/notrap/ansible_file_deploy.git&apos; )

          }
        }
        
        stage(&apos;Galaxy RUN&apos;) {
            steps{
                script {
                    //sh &quot;ansible-galaxy install -r requirements.yml --force -p roles -vvvv&quot; 
                    runAnsibleGalaxy()
                }
            }
        }

        stage(&apos;PUSH RUN&apos;) {
            steps{
                script {

                    sdf = new SimpleDateFormat(&quot;MM/dd/yyyy&quot;)
                    def now = sdf.format(date)
                    withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;gitlab_jenkis&apos;, usernameVariable: &apos;GIT_AUTHOR_NAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;]]) {
                    sh &apos;git config --global user.email &quot;roles_colections@jenkins.com&quot;&apos;
                    sh &apos;git config --global user.name &quot;Jenkins&quot;&apos;
                    sh &apos;git config --global push.default simple&apos;
                    sh &apos;git add .&apos;
                    sh &apos;git commit -m &quot;$BUILD_NUMBER&quot; &apos;
                    sh &apos;git tag -a &quot;${BUILD_NUMBER}&quot; -m &quot;CREATE: date: &apos; + now + &apos; &quot;&apos;

                    sh(&apos;git push http://${GIT_AUTHOR_NAME}:${GIT_PASSWORD}@gitlab.devops/notrap/ansible_file_deploy.git master  --tags -f --no-verify&apos;)

                    //sh &apos;git push origin &quot;$BUILD_NUMBER&quot;&apos;

                    }
                }
            }
        }


    }
    
}


def gitCloneFrom(branch,credentialsId,url ){
    try{
        git branch: &quot;${branch}&quot;, credentialsId: &quot;${credentialsId}&quot;, url: &quot;${url}&quot;
    } catch(Exception e) {
        println(&quot;Exception: ${e}&quot;)
    }
}

def runAnsibleGalaxy(){
    try{
       sh &quot;ansible-galaxy install -r requirements.yml --force -p roles -vvvv&quot;
    } catch(Exception e) {
       println(&quot;Exception: ${e}&quot;)
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>