<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>ROOLBACK</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.19">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.19">
          <spec></spec>
          <triggerOnPush>true</triggerOnPush>
          <triggerToBranchDeleteRequest>false</triggerToBranchDeleteRequest>
          <triggerOnMergeRequest>true</triggerOnMergeRequest>
          <triggerOnlyIfNewCommitsPushed>false</triggerOnlyIfNewCommitsPushed>
          <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
          <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
          <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
          <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
          <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
          <triggerOnNoteRequest>true</triggerOnNoteRequest>
          <noteRegex>Jenkins please retry a build</noteRegex>
          <ciSkip>true</ciSkip>
          <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
          <labelsThatForcesBuildIfAdded></labelsThatForcesBuildIfAdded>
          <setBuildDescription>true</setBuildDescription>
          <branchFilterType>All</branchFilterType>
          <includeBranchesSpec></includeBranchesSpec>
          <excludeBranchesSpec></excludeBranchesSpec>
          <sourceBranchRegex></sourceBranchRegex>
          <targetBranchRegex></targetBranchRegex>
          <secretToken>{AQAAABAAAAAQPp6i6wqy/61xUGKGKvoW/AzTnO0UJpyXLyvvoo6TPLA=}</secretToken>
          <pendingBuildName></pendingBuildName>
          <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
        </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>ROOLBACK</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.5.6">
          <name>ROOLBACK_BUILDS</name>
          <description>ROOLBACK_BUILDS</description>
          <randomName>choice-parameter-451394274255466</randomName>
          <visibleItemCount>67</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.76">
              <script>// Import the JsonSlurper class to parse Dockerhub API response
import groovy.json.JsonSlurper
// Set the URL we want to read from, it is MySQL from official Library for this example, limited to 20 results only.
docker_image_tags_url = &quot;https://hub.docker.com/v2/repositories/liviorodrigues/aracnos/tags/?page_size=110&quot;
try {
    // Set requirements for the HTTP GET request, you can add Content-Type headers and so on...
    def http_client = new URL(docker_image_tags_url).openConnection() as HttpURLConnection
    http_client.setRequestMethod(&apos;GET&apos;)
    // Run the HTTP request
    http_client.connect()
    // Prepare a variable where we save parsed JSON as a HashMap, it&apos;s good for our use case, as we just need the &apos;name&apos; of each tag.
    def dockerhub_response = [:]    
    // Check if we got HTTP 200, otherwise exit
    if (http_client.responseCode == 200) {
        dockerhub_response = new JsonSlurper().parseText(http_client.inputStream.getText(&apos;UTF-8&apos;))
    } else {
        println(&quot;HTTP response error&quot;)
        System.exit(0)
    }
    // Prepare a List to collect the tag names into
    def image_tag_list = []
    // Iterate the HashMap of all Tags and grab only their &quot;names&quot; into our List
    dockerhub_response.results.each { tag_metadata -&gt;
        image_tag_list.add(&quot;Aracnos &quot; + tag_metadata.name)    
    }
    // The returned value MUST be a Groovy type of List or a related type (inherited from List)
    // It is necessary for the Active Choice plugin to display results in a combo-box
    return image_tag_list.sort()
} catch (Exception e) {
         // handle exceptions like timeout, connection errors, etc.
         println(e)
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.76">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>aracnos</projectName>
          <projectFullName>aracnos</projectFullName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>import java.text.SimpleDateFormat
def date = new Date()
def rollback = ROOLBACK_BUILDS.replace(&quot;Aracnos &quot;, &quot;&quot;)
//def rollback = env.ROOLBACK_BUILDS
def tag_number = (params.ROOLBACK == true) ? rollback : env.BUILD_NUMBER

//ROOLBACK_BUILDS_NUMBER

pipeline {
   agent any
       environment {
        registry = &quot;liviorodrigues/aracnos&quot;
        registryCredential = &apos;docker_hub&apos;
        dockerImage = &apos;aracnos&apos;
        pom_version = &quot;&quot;
    }
   
    parameters {
        booleanParam(name: &quot;ROOLBACK&quot;, defaultValue: false)
    }

    stages {

        stage(&apos;Clean Workspace&apos;) {
            //when { expression { !params.ROOLBACK } }
            steps {
                sh &quot;printenv&quot;
                echo ROOLBACK_BUILDS
                echo rollback
                //error(&quot;ok&quot;)
                deleteDir()
              }
        }
    
        stage(&apos;Clone App&apos;) {
            when { expression { !params.ROOLBACK } }
            steps {
                gitCloneFrom(&apos;master&apos;,&apos;gitlab_jenkis&apos;,&apos;http://gitlab.devops/notrap/aracnos.git&apos; )

                script{
                    pom_version = readMavenPom().getVersion()
                    echo &quot;VERSION: ${pom_version}&quot;
                }

                sh &quot;mkdir -p deploy&quot;
                dir(&quot;deploy&quot;){
                    gitCloneFrom(&apos;master&apos;,&apos;gitlab_jenkis&apos;,&apos;http://gitlab.devops/notrap/ansible_file_deploy.git&apos; )
                }
            }
        }
        
        stage(&apos;Clone Config&apos;) {
            steps {
                sh &quot;mkdir -p deploy&quot;
                dir(&quot;deploy&quot;){
                    gitCloneFrom(&apos;master&apos;,&apos;gitlab_jenkis&apos;,&apos;http://gitlab.devops/notrap/ansible_file_deploy.git&apos; )
                }
            }
        }

        
        stage(&apos;SonarQube Analysis&apos;) {
            when { expression { !params.ROOLBACK } }
            steps {
            withSonarQubeEnv(&apos;sonar_aracnos_server&apos;) {
                    sh &quot;mvn sonar:sonar -Dsonar.projectKey=aracnor -Dsonar.host.url=http://sonar.devops -Dsonar.login=5edb3a9357d4321f04951182bd7c43b5d7828100&quot;
            }
          }
        }

        stage(&quot;Quality Gate&quot;) {
            when { expression { !params.ROOLBACK } }
            steps {
                withSonarQubeEnv(&apos;sonar_aracnos_server&apos;) {
                    sh &apos;mvn -B -X sonar:sonar&apos;
                    timeout(time: 10, unit: &apos;MINUTES&apos;) {
                        waitForQualityGate abortPipeline: false
                    }
                }
            }
        }



        stage(&apos;Build JAR&apos;) {
          when { expression { !params.ROOLBACK } }
          steps {
                
            sh &quot;mvn -B -DskipTests clean package&quot;
            //stash name:&quot;jar&quot;, includes:&quot;target/myappapi-0.0.0-SNAPSHOT.jar&quot;
          }
        }
        
        stage(&apos;Test&apos;) {
            when { expression { !params.ROOLBACK } }
            steps {
                sh &apos;mvn test&apos;
              }
              post {
                always {
                  junit &apos;target/surefire-reports/*.xml&apos;
                }
              }
        }
        
        stage(&apos;Building image&apos;) {
            when { expression { !params.ROOLBACK } }
            steps{
                script {
                dockerImage = docker.build(registry + &quot;:$BUILD_NUMBER&quot; )
                sh &apos;docker build -t liviorodrigues/aracnos&quot;:$BUILD_NUMBER&quot; . &apos;
                }
            }
        }

        stage(&apos;Register Image&apos;) {
            when { expression { !params.ROOLBACK } }
            steps{
                script {
                    docker.withRegistry( &apos;&apos;, registryCredential ) {
                    dockerImage.push()
                }
            }
          }
        }        

        stage(&apos;Deploy: ${tag_number} &apos;) {
           // when { expression { params.ROOLBACK } }
            steps{
                script {
                    //   def tag_number = (params.ROOLBACK == true) ? rollback : env.BUILD_NUMBER
                       dir(&quot;deploy&quot;){
                           deployWithBuildNumber(tag_number)
                       }
                }
            }
        }

        stage(&quot;TAGs&quot;) {
            when { expression { !params.ROOLBACK } }
            steps{
                 script {

                    sdf = new SimpleDateFormat(&quot;MM/dd/yyyy HH:mm:ss&quot;)
                    def now = sdf.format(date)
                    withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;gitlab_jenkis&apos;, usernameVariable: &apos;GIT_AUTHOR_NAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;]]) {
                    sh &apos;git config --global user.email &quot;aracnos@jenkins.com&quot;&apos;
                    sh &apos;git config --global user.name &quot;Jenkins&quot;&apos;
                    sh &apos;git config --global push.default simple&apos;
                    sh &apos;git tag -a &quot;v${BUILD_NUMBER}.&apos; + pom_version + &apos;&quot; -m &quot;CREATE: date: &apos; + now + &apos; &quot;&apos;

                    sh(&apos;git push http://${GIT_AUTHOR_NAME}:${GIT_PASSWORD}@gitlab.devops/notrap/aracnos.git  --tags -f --no-verify&apos;)
                    }
                }
            }
        }

    }
    
}


def gitCloneFrom(branch,credentialsId,url ){
    try{
        git branch: &quot;${branch}&quot;, credentialsId: &quot;${credentialsId}&quot;, url: &quot;${url}&quot;
    } catch(Exception e) {
        println(&quot;Exception: ${e}&quot;)
    }
}

def deployWithBuildNumber(buildNumber){
    try{
       sh &quot;ansible-playbook -i hosts app_provisioning.yml --extra-vars REGISTER=${buildNumber} -vv&quot;
    } catch(Exception e) {
       println(&quot;Exception: ${e}&quot;)
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>